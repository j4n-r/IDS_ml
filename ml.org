#+title: Ml
#+bibliography: ML_Network_Traffic.bib
:properties:
:header-kernel: python3 :sesseion py
:end:

* General Imports

#+begin_src jupyter-python :session py
import numpy as np
import pandas as pd
import os
#+end_src

#+RESULTS:

* Gathering data in one file
#+begin_src jupyter-python :kernel python3 :session py

combined_csv = pd.DataFrame()

for dirname, _, filenames in os.walk("./MachineLearningCVE/"):
    for filename in filenames:
            file = os.path.join(dirname, filename)
            df = pd.read_csv(file)
            combined_csv = pd.concat([combined_csv, df], ignore_index=True)

# Save the combined CSV
combined_csv.to_csv("all_week_working_hours.csv", index=False)
#+end_src

#+RESULTS:

* Read file and print info
#+begin_src jupyter-python :session py
df = pd.read_csv("all_week_working_hours.csv")

print(df.info())
#+end_src

#+RESULTS:
#+begin_example
<class 'pandas.core.frame.DataFrame'>
RangeIndex: 2830743 entries, 0 to 2830742
Data columns (total 79 columns):
 #   Column                        Dtype
---  ------                        -----
 0    Destination Port             int64
 1    Flow Duration                int64
 2    Total Fwd Packets            int64
 3    Total Backward Packets       int64
 4   Total Length of Fwd Packets   int64
 5    Total Length of Bwd Packets  int64
 6    Fwd Packet Length Max        int64
 7    Fwd Packet Length Min        int64
 8    Fwd Packet Length Mean       float64
 9    Fwd Packet Length Std        float64
 10  Bwd Packet Length Max         int64
 11   Bwd Packet Length Min        int64
 12   Bwd Packet Length Mean       float64
 13   Bwd Packet Length Std        float64
 14  Flow Bytes/s                  float64
 15   Flow Packets/s               float64
 16   Flow IAT Mean                float64
 17   Flow IAT Std                 float64
 18   Flow IAT Max                 int64
 19   Flow IAT Min                 int64
 20  Fwd IAT Total                 int64
 21   Fwd IAT Mean                 float64
 22   Fwd IAT Std                  float64
 23   Fwd IAT Max                  int64
 24   Fwd IAT Min                  int64
 25  Bwd IAT Total                 int64
 26   Bwd IAT Mean                 float64
 27   Bwd IAT Std                  float64
 28   Bwd IAT Max                  int64
 29   Bwd IAT Min                  int64
 30  Fwd PSH Flags                 int64
 31   Bwd PSH Flags                int64
 32   Fwd URG Flags                int64
 33   Bwd URG Flags                int64
 34   Fwd Header Length            int64
 35   Bwd Header Length            int64
 36  Fwd Packets/s                 float64
 37   Bwd Packets/s                float64
 38   Min Packet Length            int64
 39   Max Packet Length            int64
 40   Packet Length Mean           float64
 41   Packet Length Std            float64
 42   Packet Length Variance       float64
 43  FIN Flag Count                int64
 44   SYN Flag Count               int64
 45   RST Flag Count               int64
 46   PSH Flag Count               int64
 47   ACK Flag Count               int64
 48   URG Flag Count               int64
 49   CWE Flag Count               int64
 50   ECE Flag Count               int64
 51   Down/Up Ratio                int64
 52   Average Packet Size          float64
 53   Avg Fwd Segment Size         float64
 54   Avg Bwd Segment Size         float64
 55   Fwd Header Length.1          int64
 56  Fwd Avg Bytes/Bulk            int64
 57   Fwd Avg Packets/Bulk         int64
 58   Fwd Avg Bulk Rate            int64
 59   Bwd Avg Bytes/Bulk           int64
 60   Bwd Avg Packets/Bulk         int64
 61  Bwd Avg Bulk Rate             int64
 62  Subflow Fwd Packets           int64
 63   Subflow Fwd Bytes            int64
 64   Subflow Bwd Packets          int64
 65   Subflow Bwd Bytes            int64
 66  Init_Win_bytes_forward        int64
 67   Init_Win_bytes_backward      int64
 68   act_data_pkt_fwd             int64
 69   min_seg_size_forward         int64
 70  Active Mean                   float64
 71   Active Std                   float64
 72   Active Max                   int64
 73   Active Min                   int64
 74  Idle Mean                     float64
 75   Idle Std                     float64
 76   Idle Max                     int64
 77   Idle Min                     int64
 78   Label                        object
dtypes: float64(24), int64(54), object(1)
memory usage: 1.7+ GB
None
#+end_example

* Print Head

#+begin_src jupyter-python :session py
print(df.head())
print(df.columns)
#+end_src

* Remove spaces in front of Labels

#+begin_src jupyter-python :session py
df.columns = df.columns.str.strip()
#+end_src

#+RESULTS:

* Make train and test data
We will use a 70:30 split based on [cite:@anande_generative_2023 p. 6]
#+begin_src jupyter-python :session py
from sklearn.model_selection import train_test_split
X = df.drop(columns=['Label'])
y = df['Label']

X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.3, random_state=42)
#+end_src

#+RESULTS:

* Decision Tree Classifier

#+begin_src jupyter-python :session py
from sklearn.tree import DecisionTreeClassifier
from sklearn.model_selection import GridSearchCV
clf = DecisionTreeClassifier()
parameter_grid = {
    'max_depth': range(1, 4),
    'criterion': ['gini', 'entropy']
}

grid = GridSearchCV(clf,
                    parameter_grid,
                    n_jobs=-1,
                    return_train_score=True,
                    cv=10
                   )

grid.fit(X_train, y_train)
#+end_src

#+RESULTS:
:RESULTS:
# [goto error]
#+begin_example
[0;31m---------------------------------------------------------------------------[0m
[0;31mTypeError[0m                                 Traceback (most recent call last)
Cell [0;32mIn[10], line 16[0m
[1;32m      4[0m parameter_grid [38;5;241m=[39m {
[1;32m      5[0m     [38;5;124m'[39m[38;5;124mmax_depth[39m[38;5;124m'[39m: [38;5;241m2[39m,
[1;32m      6[0m     [38;5;124m'[39m[38;5;124mcriterion[39m[38;5;124m'[39m: [[38;5;124m'[39m[38;5;124mgini[39m[38;5;124m'[39m, [38;5;124m'[39m[38;5;124mentropy[39m[38;5;124m'[39m]
[1;32m      7[0m }
[1;32m      9[0m grid [38;5;241m=[39m GridSearchCV(clf,
[1;32m     10[0m                     parameter_grid,
[1;32m     11[0m                     n_jobs[38;5;241m=[39m[38;5;241m-[39m[38;5;241m1[39m,
[1;32m     12[0m                     return_train_score[38;5;241m=[39m[38;5;28;01mTrue[39;00m,
[1;32m     13[0m                     cv[38;5;241m=[39m[38;5;241m10[39m
[1;32m     14[0m                    )
[0;32m---> 16[0m [43mgrid[49m[38;5;241;43m.[39;49m[43mfit[49m[43m([49m[43mX_train[49m[43m,[49m[43m [49m[43my_train[49m[43m)[49m

File [0;32m/usr/lib/python3.13/site-packages/sklearn/base.py:1389[0m, in [0;36m_fit_context.<locals>.decorator.<locals>.wrapper[0;34m(estimator, *args, **kwargs)[0m
[1;32m   1382[0m     estimator[38;5;241m.[39m_validate_params()
[1;32m   1384[0m [38;5;28;01mwith[39;00m config_context(
[1;32m   1385[0m     skip_parameter_validation[38;5;241m=[39m(
[1;32m   1386[0m         prefer_skip_nested_validation [38;5;129;01mor[39;00m global_skip_validation
[1;32m   1387[0m     )
[1;32m   1388[0m ):
[0;32m-> 1389[0m     [38;5;28;01mreturn[39;00m [43mfit_method[49m[43m([49m[43mestimator[49m[43m,[49m[43m [49m[38;5;241;43m*[39;49m[43margs[49m[43m,[49m[43m [49m[38;5;241;43m*[39;49m[38;5;241;43m*[39;49m[43mkwargs[49m[43m)[49m

File [0;32m/usr/lib/python3.13/site-packages/sklearn/model_selection/_search.py:1023[0m, in [0;36mBaseSearchCV.fit[0;34m(self, X, y, **params)[0m
[1;32m   1017[0m     results [38;5;241m=[39m [38;5;28mself[39m[38;5;241m.[39m_format_results(
[1;32m   1018[0m         all_candidate_params, n_splits, all_out, all_more_results
[1;32m   1019[0m     )
[1;32m   1021[0m     [38;5;28;01mreturn[39;00m results
[0;32m-> 1023[0m [38;5;28;43mself[39;49m[38;5;241;43m.[39;49m[43m_run_search[49m[43m([49m[43mevaluate_candidates[49m[43m)[49m
[1;32m   1025[0m [38;5;66;03m# multimetric is determined here because in the case of a callable[39;00m
[1;32m   1026[0m [38;5;66;03m# self.scoring the return type is only known after calling[39;00m
[1;32m   1027[0m first_test_score [38;5;241m=[39m all_out[[38;5;241m0[39m][[38;5;124m"[39m[38;5;124mtest_scores[39m[38;5;124m"[39m]

File [0;32m/usr/lib/python3.13/site-packages/sklearn/model_selection/_search.py:1570[0m, in [0;36mGridSearchCV._run_search[0;34m(self, evaluate_candidates)[0m
[1;32m   1568[0m [38;5;28;01mdef[39;00m [38;5;21m_run_search[39m([38;5;28mself[39m, evaluate_candidates):
[1;32m   1569[0m [38;5;250m    [39m[38;5;124;03m"""Search all candidates in param_grid"""[39;00m
[0;32m-> 1570[0m     evaluate_candidates([43mParameterGrid[49m[43m([49m[38;5;28;43mself[39;49m[38;5;241;43m.[39;49m[43mparam_grid[49m[43m)[49m)

File [0;32m/usr/lib/python3.13/site-packages/sklearn/model_selection/_search.py:129[0m, in [0;36mParameterGrid.__init__[0;34m(self, param_grid)[0m
[1;32m    122[0m     [38;5;28;01mraise[39;00m [38;5;167;01mValueError[39;00m(
[1;32m    123[0m         [38;5;124mf[39m[38;5;124m"[39m[38;5;124mParameter array for [39m[38;5;132;01m{[39;00mkey[38;5;132;01m!r}[39;00m[38;5;124m should be one-dimensional, got:[39m[38;5;124m"[39m
[1;32m    124[0m         [38;5;124mf[39m[38;5;124m"[39m[38;5;124m [39m[38;5;132;01m{[39;00mvalue[38;5;132;01m!r}[39;00m[38;5;124m with shape [39m[38;5;132;01m{[39;00mvalue[38;5;241m.[39mshape[38;5;132;01m}[39;00m[38;5;124m"[39m
[1;32m    125[0m     )
[1;32m    126[0m [38;5;28;01mif[39;00m [38;5;28misinstance[39m(value, [38;5;28mstr[39m) [38;5;129;01mor[39;00m [38;5;129;01mnot[39;00m [38;5;28misinstance[39m(
[1;32m    127[0m     value, (np[38;5;241m.[39mndarray, Sequence)
[1;32m    128[0m ):
[0;32m--> 129[0m     [38;5;28;01mraise[39;00m [38;5;167;01mTypeError[39;00m(
[1;32m    130[0m         [38;5;124mf[39m[38;5;124m"[39m[38;5;124mParameter grid for parameter [39m[38;5;132;01m{[39;00mkey[38;5;132;01m!r}[39;00m[38;5;124m needs to be a list or a[39m[38;5;124m"[39m
[1;32m    131[0m         [38;5;124mf[39m[38;5;124m"[39m[38;5;124m numpy array, but got [39m[38;5;132;01m{[39;00mvalue[38;5;132;01m!r}[39;00m[38;5;124m (of type [39m[38;5;124m"[39m
[1;32m    132[0m         [38;5;124mf[39m[38;5;124m"[39m[38;5;132;01m{[39;00m[38;5;28mtype[39m(value)[38;5;241m.[39m[38;5;18m__name__[39m[38;5;132;01m}[39;00m[38;5;124m) instead. Single values [39m[38;5;124m"[39m
[1;32m    133[0m         [38;5;124m"[39m[38;5;124mneed to be wrapped in a list with one element.[39m[38;5;124m"[39m
[1;32m    134[0m     )
[1;32m    135[0m [38;5;28;01mif[39;00m [38;5;28mlen[39m(value) [38;5;241m==[39m [38;5;241m0[39m:
[1;32m    136[0m     [38;5;28;01mraise[39;00m [38;5;167;01mValueError[39;00m(
[1;32m    137[0m         [38;5;124mf[39m[38;5;124m"[39m[38;5;124mParameter grid for parameter [39m[38;5;132;01m{[39;00mkey[38;5;132;01m!r}[39;00m[38;5;124m need [39m[38;5;124m"[39m
[1;32m    138[0m         [38;5;124mf[39m[38;5;124m"[39m[38;5;124mto be a non-empty sequence, got: [39m[38;5;132;01m{[39;00mvalue[38;5;132;01m!r}[39;00m[38;5;124m"[39m
[1;32m    139[0m     )

[0;31mTypeError[0m: Parameter grid for parameter 'max_depth' needs to be a list or a numpy array, but got 2 (of type int) instead. Single values need to be wrapped in a list with one element.
#+end_example
:END:
